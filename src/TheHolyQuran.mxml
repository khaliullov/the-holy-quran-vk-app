<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="807" height="730" minWidth="807" minHeight="730" creationComplete="initApp()"
			   viewSourceURL="https://code.google.com/p/the-holy-quran-vk-app/">

	<fx:Script>
		<![CDATA[
			import Quran;
			
			import flash.events.Event;
			import flash.events.ProgressEvent;
			import flash.media.Sound;
			import flash.net.URLLoader;
			import flash.net.URLRequest;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ISort;
			import mx.collections.IViewCursor;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.ModuleEvent;
			import mx.managers.ToolTipManager;
			import mx.modules.IModuleInfo;
			import mx.modules.ModuleManager;
			import mx.utils.URLUtil;
			
			import spark.components.TextArea;
			import spark.components.gridClasses.IGridItemRenderer;
			import spark.core.IViewport;
			import spark.events.GridEvent;
			import spark.events.GridSortEvent;
			import spark.modules.ModuleLoader;
			import spark.skins.spark.StackedFormHeadingSkin;
			
			import vk.gui.Box;
			import vk.gui.RoundButton;
			import vk.gui.Utils;

			[Bindable] private var theHolyQuranSuras: ArrayCollection = new ArrayCollection();
			private var aboutDialog: Box;
			private var playButton: RoundButton;
			private var currentSura: Object;
			private var _currentState: int;
			private var currentChannel: SoundChannel;
			private var s: Sound;
			private var currentPosition: Number;
			[Bindable] public var playingSura: Number = 0;
			private var dialogSura: Box;
			private var spriteSura:Sprite = new Sprite();
			private var myCSS = new StyleSheet();
			private var positionTimer: Timer;
			private var trans: SoundTransform = new SoundTransform( 0.5, 0 );
			private var module: IModuleInfo;
			[Bindable] private var timeProgressed: String;
			[Bindable] private var timeTotal: String;
			[Bindable] private var loadProgress: String;

			private function initApp(): void {
				fillArray();
				var aboutButton: RoundButton = new RoundButton( "О переводе", 713, 9 );
				playButton = new RoundButton( "", 665, 9 );
				aboutButton.addEventListener( MouseEvent.CLICK, about_clickHandler );
				playButton.addEventListener( MouseEvent.CLICK, play_clickHandler );

				var sprite:Sprite = new Sprite();
				var tf:TextField = vk.gui.Utils.addText( 0, 0, 500, 14, aboutText, 0,
					vk.gui.Utils.TXT_HTML | vk.gui.Utils.TXT_AUTOSIZE | vk.gui.Utils.TXT_MULTILINE, 0 );
				myCSS.setStyle( "a:link", {color:"#0000ff", fontFamily:"Tahoma", textDecoration:"underline"} );
				myCSS.setStyle( "a:hover", {color:"#0000ff", fontFamily:"Tahoma", textDecoration:"none"} );
				tf.styleSheet = myCSS;
				sprite.addChild( tf );
				aboutDialog = new Box( "О переводе", sprite, 90, 500, [ "OK" ] );
				aboutDialog.addEventListener( Event.SELECT, aboutDialogClick );
				dialogSura = new Box( "Священный Коран", spriteSura, 90, 500, [ "OK" ] );
				dialogSura.addEventListener( Event.SELECT, dialogSuraClick );
				parent.addChild( aboutDialog );
				parent.addChild( playButton );
				parent.addChild( aboutButton );
				parent.addChild( dialogSura );
				_setCurrentState( 0 );
				ToolTipManager.enabled = true;
				Security.allowDomain("cs6091.vk.com"); 
				Security.loadPolicyFile("http://cs6091.vk.com/crossdomain.xml"); 
				var request:URLRequest = new URLRequest("http://cs6091.vk.com/crossdomain.xml"); 
				var loader:URLLoader = new URLLoader(); 
				loader.load(request); 
			}

			private function fillArray(): void {
				theHolyQuranSuras = Quran.theHolyQuranSurasInReleaseOrder;
				/* theHolyQuranSuras.removeAll();
				for( var i: int = 0; i < Quran.theHolyQuranSurasInReleaseOrder.length - 1; ++i ) {
					theHolyQuranSuras.addItemAt( Quran.theHolyQuranSurasInReleaseOrder.getItemAt( i ), i );
				} */
			}

			private function aboutDialogClick( e:Event ): void {
				if( e.target.buttonClickedIndex == 0 ) {
					aboutDialog.visible = false;
				}
			}

			private function dialogSuraClick( e:Event ): void {
				if( e.target.buttonClickedIndex == 0 ) {
					//dialogSura.visible = false;
				}
			}

			protected function about_clickHandler( event: MouseEvent ): void {
				aboutDialog.visible = true; 
			}

			private function toggleSound(): void {
				if( _currentState == 0 ) {
					if( !currentSura ) {
						var currentIndex: int = mainGrid.selectedIndex;
						if( currentIndex == -1 ) {
							currentIndex = 0;
							mainGrid.setSelectedIndex( currentIndex );
						}
						currentSura = theHolyQuranSuras.getItemAt( currentIndex );
						currentPosition = 0;
						playSound();
					} else {
						playSound();
					}
				} else { // pause
					if( currentChannel ) {
						currentPosition = currentChannel.position;
						currentChannel.stop();
					}
					_setCurrentState( 0 );
				}
			}
			
			protected function play_clickHandler( event: MouseEvent ): void {
				toggleSound();
			}

			private function _setCurrentState( newState: int ): void {
				_currentState = newState;
				if( newState == 0 ) {
					playButton.label = "play";
					playingSura = 0;
				} else if( newState == 1 ) {
					playButton.label = "stop";
				}
			}

			private function playSound(): void {

				var URL: String;
				if( currentSura ) {
					if( currentPosition == 0 ) {

						URL = 'http://vk.com/doc3996662_' + currentSura.document;
						mainTitle.text = 'Священный Коран. Сура №' + currentSura.id;
						progressBar.visible = true;
						s = new Sound();
						s.addEventListener( ProgressEvent.PROGRESS, onLoadProgress );
						s.addEventListener( Event.COMPLETE, onLoadComplete );
						s.addEventListener( IOErrorEvent.IO_ERROR, onIOError );
						var req: URLRequest = new URLRequest( URL );
						s.load( req );
						currentChannel = s.play( 0, 0, trans );
						currentChannel.addEventListener( Event.SOUND_COMPLETE, onSoundComplete );
					} else {
						currentChannel = s.play( currentPosition, 0, trans );
						currentChannel.addEventListener( Event.SOUND_COMPLETE, onSoundComplete );
					}
					if( positionTimer ) {
						positionTimer.stop();
					}
					positionTimer = new Timer(50);
					positionTimer.addEventListener( TimerEvent.TIMER, positionTimerHandler );
					positionTimer.start();
					_setCurrentState( 1 );
					mainGrid.ensureCellIsVisible( theHolyQuranSuras.getItemIndex( currentSura ) );
					playingSura = currentSura.id;
				}
			}

			private function convertToTime( value: Number, hourDigits: Number = 3 ) {
				var minutes: uint = Math.floor( value / 1000 / 60 );
				var seconds: uint = Math.floor( value / 1000 ) % 60;
				return zeroPad( minutes, hourDigits ) + ':' + zeroPad( seconds, 2 );
			}

			private function positionTimerHandler( event: TimerEvent ): void {
				timeProgressed = convertToTime( currentChannel.position );
				if( s.length ) {
					timeTotal = convertToTime( s.length );
					if( loadProgress == 'загружено' ) {
						progressBar.setProgress( Math.round( 100 * currentChannel.position / s.length ), 100 );
					}
				} else {
					timeTotal = '000:00';
				}
			}

			private function onSoundComplete( event: Event ): void {
				currentChannel.removeEventListener( Event.SOUND_COMPLETE, arguments.callee );
				var currentIndex: int = theHolyQuranSuras.getItemIndex( currentSura );
				currentPosition = 0;
				positionTimer.stop();
				if( theHolyQuranSuras.length <= currentIndex + 1 ) {
					_setCurrentState( 0 );
				} else {
					currentSura = theHolyQuranSuras.getItemAt( currentIndex + 1 );
					mainGrid.setSelectedIndex( currentIndex + 1 );
					mainGrid.ensureCellIsVisible( mainGrid.selectedIndex );
					playSound();
				}
			}

			private function onLoadProgress( event: ProgressEvent ): void {
				var progress: Number = Math.round( 100 * ( event.bytesLoaded / event.bytesTotal ) )
				if( progress < 100 ) {
					loadProgress = 'загрузка ' + progress.toString() + '%';
				} else {
					loadProgress = 'загружено';
				}
				progressBar.setProgress( progress, 100 );
			}

			private function onLoadComplete( event: Event ): void {
				loadProgress = 'загружено';
				progressBar.setProgress( 100, 100 );
			}

			private function onIOError( event: IOErrorEvent ): void {
				_setCurrentState( 0 );
			}

			protected function list_doubleClickHandler( event: GridEvent ): void {
				if( event.item ) {
					if( _currentState == 1 ) {
						if( currentChannel ) {
							currentChannel.stop();
						}
						_setCurrentState( 0 );
					}
					currentPosition = 0;
					currentSura = event.item;
					playSound();
				}
			}

			protected function list_sortChangingHandler( event: GridSortEvent ): void
			{
				if( event.oldSortFields && event.oldSortFields.length && event.newSortFields &&
					event.newSortFields.length && event.newSortFields[ 0 ].descending == false &&
					event.newSortFields[ 0 ].name == 'id' ) {
					event.newSortFields.shift();
				}
			}

			protected function list_sortChangeHandler( event: GridSortEvent ): void {
				if( !event.newSortFields.length ) {
					theHolyQuranSuras.sort = null;
					fillArray();
					theHolyQuranSuras.refresh();
				}
				mainGrid.ensureCellIsVisible( 0 );
			}

			protected function list_initializeHandler( event: FlexEvent ):void {
				this.addEventListener( 'clickSuraDownload', onClickSuraDownload );
				this.addEventListener( 'clickSuraSaveAs', onClickSuraSaveAs );
				this.addEventListener( 'clickSuraText', onClickSuraText );
				this.addEventListener( 'clickListenSura', onClickListenSura );
			}

			private function zeroPad( number: int, width: int ): String {
				var ret: String = ""+number;
				while( ret.length < width )
					ret = "0" + ret;
				return ret;
			}

			private function onClickListenSura( event: Event ): void {
				var item: IGridItemRenderer = event.target as IGridItemRenderer;
				if(!item || !item.data) {
				} else {
					if( currentSura && currentSura.id == item.data.id ) {
						toggleSound();
					} else {
						
						currentSura = item.data;
						if( currentChannel ) {
							currentChannel.stop();
						}
						_setCurrentState( 0 );
						currentPosition = 0;
						playSound();
					}
				}
			}

			private function onClickSuraSaveAs( event: Event ): void {
				var item: IGridItemRenderer = event.target as IGridItemRenderer;
				if(!item || !item.data) {
				} else {
					var u: URLRequest = new URLRequest( 'http://vk.com/doc3996662_' + item.data.document );
					var fileToDownload: FileReference = new FileReference();
					var oldSort: ISort = Quran.theHolyQuranSurasInReleaseOrder.sort;
					Quran.theHolyQuranSurasInReleaseOrder.sort = null;
					var index: int = Quran.theHolyQuranSurasInReleaseOrder.getItemIndex( item.data );
					Quran.theHolyQuranSurasInReleaseOrder.sort = oldSort;
					fileToDownload.download( u, zeroPad( ++index, 3 ) + ' Сура ' + item.data.id + ' ' + item.data.name + '.mp3' );
				}
			}

			private function onClickSuraDownload( event: Event ): void {
				var item: IGridItemRenderer = event.target as IGridItemRenderer;
				if(!item || !item.data) {
				} else {
					var u: URLRequest = new URLRequest( 'http://vk.com/doc3996662_' + item.data.document );
					navigateToURL( u );
				}
			}

			private function onClickSuraText( event: Event ): void {
				var item: IGridItemRenderer = event.target as IGridItemRenderer;
				if(!item || !item.data) {
				} else {
					if( module ) {
						module.unload();
					}
					module = ModuleManager.getModule( item.data.note ); // 'Sura' + item.data.id + '.swf'
					module.addEventListener( ModuleEvent.READY, modEventHandler );
					module.load( null, SecurityDomain.currentDomain );
				}
			}

			private function modEventHandler(e:ModuleEvent):void {
				var myModuleInstance: IModuleInterface = module.factory.create() as IModuleInterface;
				spriteSura.removeChildren();
				var tf:TextField = vk.gui.Utils.addText( 0, 0, 500, 14,
					myModuleInstance.getGetSuraText() , 0,
					vk.gui.Utils.TXT_HTML | vk.gui.Utils.TXT_AUTOSIZE | vk.gui.Utils.TXT_MULTILINE, 0 );
				tf.styleSheet = myCSS;
				spriteSura.addChild( tf );
				spriteSura.dispatchEvent( new Event( Event.RESIZE ) );
				dialogSura.visible = true;
				module.unload();
			}

			protected function volumeBar_changeHandler( event: Event ): void {
				var slider: HSlider = event.target as HSlider;
				trans.volume = slider.value / 100;
				if( currentChannel ) {
					currentChannel.soundTransform = trans;
				}
			}

			private function onMouseWheelChanging( event: MouseEvent ): void {
				event.preventDefault();

				var modifier:int = 4;
				var delta:Number = Number( event.delta ) * modifier;
				var scroller = mainGrid.scroller;
				var viewport:IViewport = scroller.verticalScrollBar.viewport;
				var vPos:Number = viewport.verticalScrollPosition;
				var maximum:Number = scroller.verticalScrollBar.maximum;

				if( delta < 0 ) {
					scroller.verticalScrollBar.viewport.verticalScrollPosition =
						Math.min( vPos - delta, maximum );
				} else {
					scroller.verticalScrollBar.viewport.verticalScrollPosition =
						Math.max( vPos - delta, 0 );
				}
			}

			private function timeLabel( item: Object, column: GridColumn ): String {
				return convertToTime( item.length * 1000, 1 );
			}

			private function sizeLabel( item: Object, column: GridColumn ): String {
				var size: Number = Math.round( 10 * item.size / 1048576 ) / 10;
				return size.toString() + ' МБ';
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:String id="aboutText">
			<![CDATA[	<b>Священный Коран</b>

<a href='http://lib.rus.ec/b/180019' target='_blank'>перевод</a> <a href='http://ru.wikipedia.org/wiki/%D0%A8%D1%83%D0%BC%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9,_%D0%A2%D0%B5%D0%BE%D0%B4%D0%BE%D1%80_%D0%90%D0%B4%D0%B0%D0%BC%D0%BE%D0%B2%D0%B8%D1%87'
target='_blank'>Теодора Адамовича Шумовского</a>,
получивший благословение <a href='http://ru.wikipedia.org/wiki/%D0%93%D0%B0%D0%B9%D0%BD%D1%83%D1%82%D0%B4%D0%B8%D0%BD,_%D0%A0%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C_%D0%98%D1%81%D0%BC%D0%B0%D0%B3%D0%B8%D0%BB%D0%BE%D0%B2%D0%B8%D1%87' target='_blank'>Председателя Совета Муфтиев России</a>
читает Народный артист <a href='http://ru.wikipedia.org/wiki/%D0%9A%D0%BB%D1%8E%D0%BA%D0%B2%D0%B8%D0%BD,_%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80_%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B8%D1%87' target='_blank'>Александр Клюквин</a>
<a href="http://truetorrents.ru/torrent-1693.html" target='_blank'>torrent</a>
Издательство «Покидышевъ и сыновья»
]]>
		</fx:String>
	</fx:Declarations>
	<s:DataGrid x="10" y="38" width="787" height="682" editable="false" enabled="true" id="mainGrid"
				requestedRowCount="4" dataProvider="{theHolyQuranSuras}" sortChanging="list_sortChangingHandler( event )"
				sortChange="list_sortChangeHandler( event )" initialize="list_initializeHandler( event)"
				gridDoubleClick="list_doubleClickHandler( event )" doubleClickEnabled="true"
				mouseWheel="onMouseWheelChanging( event )">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn width="38" dataField="id" headerText="№"></s:GridColumn>
				<s:GridColumn dataField="name" headerText="Название Суры"></s:GridColumn>
				<s:GridColumn width="61" dataField="length" headerText="Время"
							  labelFunction="timeLabel" resizable="false">
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer textAlign="right" />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn width="66" dataField="size" headerText="Размер"
							  labelFunction="sizeLabel" resizable="false">
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer textAlign="right" />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn width="112" headerText="Действия">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									import mx.core.FlexGlobals;

									[Embed(source="../asserts/play.png")]
									private var play: Class;
									[Embed(source="../asserts/pause.png")]
									private var pause: Class;

									protected function downloadClickHandler( event: MouseEvent ): void {
										dispatchEvent(new Event( 'clickSuraDownload', true ) );
										event.preventDefault();
									}

									protected function listenClickHandler( event: MouseEvent ): void {
										dispatchEvent(new Event( 'clickListenSura', true ) );
										event.preventDefault();
									}

									protected function saveAsClickHandler( event: MouseEvent ): void {
										dispatchEvent(new Event( 'clickSuraSaveAs', true ) );
										event.preventDefault();
									}

									protected function noteClickHandler( event:MouseEvent ): void {
										dispatchEvent(new Event( 'clickSuraText', true ) );
										event.preventDefault();
									}
								</fx:Script>
								<s:HGroup height="100%" paddingTop="0">
									
									<mx:Image maxWidth="24" maxHeight="24" useHandCursor="true" buttonMode="true"
											  source="{data.id == FlexGlobals.topLevelApplication.playingSura ? pause : play}"
											  smoothBitmapContent="false" click="listenClickHandler( event )"  />
									<mx:Image maxWidth="24" maxHeight="24" source="@Embed(source='asserts/text.png')"
											  smoothBitmapContent="false" useHandCursor="true" buttonMode="true"
											  click="noteClickHandler( event )" toolTip="Показать текст Суры №{data.id}" />
									<mx:Image maxWidth="24" maxHeight="24" source="@Embed(source='asserts/save_as.png')"
											  smoothBitmapContent="false" useHandCursor="true" buttonMode="true"
											  click="saveAsClickHandler( event )" toolTip="Сохранить Суру №{data.id} как..." />
									<mx:Image maxWidth="24" maxHeight="24" source="@Embed(source='asserts/download.png')"
											  smoothBitmapContent="false" useHandCursor="true" buttonMode="true"
											  click="downloadClickHandler( event )" toolTip="Сохранить Суру №{data.id}" />
								</s:HGroup>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Label id="mainTitle" x="10" y="10" fontSize="24"
			 text="Священный Коран. Перевод Т.А.Шумовского"/>
	<mx:ProgressBar id="progressBar" x="359" y="2" visible="false" maximum="100" minimum="0" mode="manual" label="{timeProgressed} / {timeTotal} | {loadProgress}"/>
	<s:HSlider id="volumeBar" x="562" y="15" change="volumeBar_changeHandler( event )"
			   liveDragging="true" maximum="100" minimum="0" stepSize="1" value="50" />
</s:Application>
